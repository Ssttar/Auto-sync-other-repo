name: Monitor Shiro push

on:
  schedule:
    - cron: '*/5 * * * *' # 每5分钟运行一次
  workflow_dispatch:

permissions:
  contents: write

env:
  HASH_FILE: build_hash

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Read existing HASH_FILE content
        id: read_hash
        run: |
          content=$(cat ${{ env.HASH_FILE }}) || true
          echo "hash_content=$content" >> "$GITHUB_OUTPUT"

      - name: Check for new commits in Shiro
        id: get_latest_hash
        run: |
          latest_hash=$(curl -s https://api.github.com/repos/innei-dev/Shiroi/commits | jq -r '.[0].sha')
          echo "latest_hash=$latest_hash" >> "$GITHUB_OUTPUT"

      - name: Compare hashes
        id: hash_compare
        env:
          LATEST_HASH: ${{ steps.get_latest_hash.outputs.latest_hash }}
          CURRENT_HASH: ${{ steps.read_hash.outputs.hash_content }}
        run: |
          if [ "$LATEST_HASH" != "$CURRENT_HASH" ]; then
            echo "hash_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "hash_changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Trigger workflow in Another Repository
        if: steps.hash_compare.outputs.hash_changed == 'true'
        run: |
          # Set the required variables
          repo_owner="Ssttar"
          repo_name="Shiroi"
          event_type="tigger-workflow"

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$repo_owner/$repo_name/dispatches \
            -d '{"event_type": "'"$event_type"'", "client_payload": {"ref": "'"$LATEST_HASH"'"}}'

      - name: Write new hash to file
        if: steps.hash_compare.outputs.hash_changed == 'true'
        env:
          LATEST_HASH: ${{ steps.get_latest_hash.outputs.latest_hash }}
        run: echo $LATEST_HASH > ${{ env.HASH_FILE }}

      - name: Commit and push new hash file
        if: steps.hash_compare.outputs.hash_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ env.HASH_FILE }}
          git commit -m "Update hash file to ${{ steps.get_latest_hash.outputs.latest_hash }}"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
